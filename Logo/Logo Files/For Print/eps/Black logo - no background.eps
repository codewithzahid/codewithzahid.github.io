%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2392 708
%%HiResBoundingBox: 0 0 2391.1199 708
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2391.1199 708 re
W
q
[0.24 0 0 -0.24 0 708] cm
q
0 0 9962.5 2950 re
W*
q
[68.564392 0 0 68.553635 -1626.23145 -1970.8829] cm
27.993 35.580002 m
35.298 42.883003 l
27.993 50.189003 l
30.549999 52.746002 l
40.412998 42.884003 l
30.549999 33.023003 l
27.993 35.580002 l
h
42.147999 47.974998 m
42.147999 51.591999 l
70.727997 51.591999 l
70.727997 47.974998 l
42.147999 47.974998 l
h
42.147999 59.549999 m
70.727997 59.549999 l
70.727997 55.932999 l
42.147995 55.932999 l
42.147995 59.549999 l
42.147999 59.549999 l
h
42.147999 67.508003 m
56.438 67.508003 l
56.438 63.891003 l
42.147999 63.891003 l
42.147999 67.508003 l
h
f
Q
q
[125.378593 0 0 125.358925 3693.8621 -128.617966] cm
4.72 17.16 m
10.4 17.16 l
10.4 20 l
0.96 20 l
0.96 17.6 l
6.58 8.54 l
3.46 8.54 l
3.46 10.28 l
0.92 8.9 l
0.92 5.7 l
10.36 5.7 l
10.36 8.08 l
4.72 17.16 l
h
17.34 15.42 m
17.206659 15.39334 17.0667 15.37662 16.92004 15.369962 c
16.77338 15.363303 16.646721 15.359962 16.54006 15.359962 c
15.98006 15.359962 15.52676 15.446622 15.18006 15.619962 c
14.833361 15.793302 14.660061 16.093302 14.660061 16.519962 c
14.660061 16.786623 14.723401 16.996622 14.850061 17.149961 c
14.97672 17.303301 15.133381 17.416641 15.320041 17.489981 c
15.506701 17.56332 15.703361 17.606661 15.910021 17.620001 c
16.11668 17.633341 16.293341 17.640001 16.44 17.640001 c
16.706661 17.640001 17.00666 17.606661 17.34 17.540001 c
17.34 15.420001 l
17.34 15.42 l
h
16.299999 13.22 m
16.40666 13.22 16.549959 13.22336 16.72996 13.23002 c
16.90996 13.236681 17.1133 13.24668 17.33996 13.26002 c
17.32662 12.740021 17.14328 12.40336 16.78994 12.25002 c
16.4366 12.09668 15.97994 12.020021 15.41994 12.020021 c
15.11328 12.020021 14.75994 12.056681 14.35994 12.13002 c
13.959939 12.20336 13.5266 12.31336 13.059939 12.46002 c
12.73994 11.36002 l
12.69994 11.21336 12.64328 11.00002 12.56994 10.720019 c
12.496599 10.440019 12.4466 10.220019 12.41994 10.06002 c
13.0866 9.83336 13.716641 9.670019 14.30994 9.57002 c
14.90324 9.47002 15.439941 9.42002 15.91994 9.42002 c
17.333241 9.42002 18.42654 9.756681 19.19994 10.43002 c
19.973339 11.10336 20.35994 12.18002 20.35994 13.660021 c
20.35994 19.520021 l
19.839939 19.666681 19.239939 19.810022 18.55994 19.950022 c
17.879942 20.090021 17.146641 20.160021 16.35994 20.160021 c
15.666599 20.160021 15.036639 20.100021 14.469939 19.980021 c
13.903239 19.86002 13.416639 19.660021 13.009939 19.38002 c
12.603239 19.100019 12.289939 18.73336 12.069939 18.28002 c
11.849938 17.826679 11.739939 17.273319 11.739939 16.62002 c
11.739939 15.966721 11.876598 15.42002 12.149939 14.98002 c
12.423279 14.540019 12.776619 14.19002 13.209938 13.930019 c
13.643257 13.670019 14.129938 13.486679 14.669938 13.380019 c
15.209938 13.273359 15.753238 13.220019 16.299938 13.220019 c
16.299999 13.22 l
h
22.32 8.4 m
22.32 8.41334 22.22998 8.419961 22.04998 8.419961 c
21.45998 8.419961 l
20.61998 8.419961 l
21.97998 5.979961 l
25.339981 5.979961 l
25.339981 10.499961 l
25.619982 10.233301 25.96664 9.996641 26.379982 9.789981 c
26.793324 9.583321 27.286661 9.479981 27.859982 9.479981 c
29.046682 9.479981 29.929981 9.80998 30.509981 10.46998 c
31.089981 11.12998 31.379982 12.17998 31.379982 13.61998 c
31.379982 19.999981 l
28.339981 19.999981 l
28.339981 14.019981 l
28.339981 13.499981 28.21998 13.086641 27.97998 12.779982 c
27.739981 12.473322 27.37332 12.319982 26.87998 12.319982 c
26.45332 12.319982 26.089981 12.436642 25.78998 12.669982 c
25.489979 12.903322 25.339979 13.346662 25.339979 13.999982 c
25.339979 19.999981 l
22.27998 19.999981 l
22.32 8.4 l
h
36.779999 9.56 m
36.779999 20 l
33.759998 20 l
33.759998 12.780001 l
33.859997 12.06 l
32.139996 12.06 l
33.499996 9.56 l
36.779995 9.56 l
36.779999 9.56 l
h
36.700001 8.7 m
33.700001 8.7 l
33.700001 5.98 l
36.700001 5.98 l
36.700001 8.7 l
h
47.66 5.98 m
47.660019 19.719999 l
47.180019 19.82666 46.71336 19.90666 46.260017 19.959999 c
45.806675 20.013338 45.393337 20.053339 45.020016 20.08 c
44.646694 20.106661 44.326675 20.120001 44.060017 20.120001 c
43.520016 20.120001 l
42.613358 20.120001 41.850014 19.980001 41.230015 19.700001 c
40.610016 19.42 40.110016 19.040001 39.730015 18.560001 c
39.350014 18.080002 39.073357 17.523302 38.900013 16.890001 c
38.726669 16.2567 38.640015 15.580002 38.640015 14.860002 c
38.640015 13.940002 38.756676 13.150002 38.990013 12.490002 c
39.223351 11.830002 39.550014 11.286701 39.970013 10.860002 c
40.390011 10.433302 40.890011 10.116681 41.470013 9.910022 c
42.050014 9.703362 42.693314 9.600021 43.400013 9.600021 c
43.520012 9.600021 43.656673 9.610022 43.810013 9.630021 c
43.963352 9.650021 44.110012 9.673361 44.250011 9.700021 c
44.390011 9.726681 44.520012 9.756681 44.640011 9.790021 c
44.76001 9.823361 44.853352 9.860021 44.92001 9.900021 c
44.92001 8.72002 l
44.980011 8.46002 l
43.180012 8.46002 l
44.520012 5.98002 l
47.660011 5.98002 l
47.66 5.98 l
h
43.84 17.440001 m
44.040001 17.440001 44.233341 17.43334 44.420002 17.42 c
44.606663 17.40666 44.773323 17.38666 44.919983 17.360001 c
44.919983 12.240001 l
44.826641 12.226661 44.719982 12.20666 44.599983 12.18 c
44.493324 12.15334 44.369984 12.13334 44.229984 12.12 c
44.089985 12.10666 43.933323 12.099999 43.759983 12.099999 c
43.133324 12.099999 42.606682 12.313339 42.179985 12.74 c
41.753288 13.16666 41.539986 13.8733 41.539986 14.86 c
41.539986 15.353339 41.599987 15.76668 41.719986 16.1 c
41.839985 16.433321 42.003326 16.700001 42.209988 16.9 c
42.416649 17.099998 42.659988 17.24 42.939987 17.32 c
43.219986 17.4 43.519989 17.440001 43.839989 17.440001 c
43.84 17.440001 l
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
